@page "/list-inputreceipts"
@inject InputReceiptService ReceiptService
@inherits LayoutComponentBase
@using Models
<h3 class="mb-3">Danh sách phiếu nhập</h3>
@if (isLoading)
{
    <BlazorBootstrap.Spinner Color="SpinnerColor.Primary" />
}
else
{

    <MudTable T="RowItem"
    Items="rowItems" Hover="true" Breakpoint="Breakpoint.Sm">

        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>ReceiptId</MudTh>
            <MudTh>ManagerName</MudTh>
            <MudTh>CreatedDate</MudTh>
            <MudTh>ConfirmedDate</MudTh>
            <MudTh>CancelDate</MudTh>
            <MudTh>StorageName</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Total</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context))">@((context.ShowDetail == true) ? "Hide" : "Show") Receipt Details</MudButton></MudTd>
            <MudTd DataLabel="ReceiptId">@context.rowItem.ReceiptId</MudTd>
            <MudTd DataLabel="ManagerName">@context.rowItem.ManagerName</MudTd>
            <MudTd DataLabel="CreatedDate">@context.rowItem.CreatedDate</MudTd>
            <MudTd DataLabel="ConfirmedDate">@context.rowItem.ConfirmedDate</MudTd>
            <MudTd DataLabel="CancelDate">@context.rowItem.CancelDate</MudTd>
            <MudTd DataLabel="StorageName">@context.rowItem.StorageName</MudTd>
            <MudTd DataLabel="Status">@context.rowItem.Status</MudTd>
            <MudTd DataLabel="Total">@context.rowItem.Total</MudTd>
            <MudTd>
                @if (context.rowItem.Status != "Cancelled" && context.rowItem.Status != "Completed")
                {
                    <MudButton Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small"
                    OnClick="() => ShowCancelDialog(context)">
                        Huỷ
                    </MudButton>
                    <MudButton Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small"
                    OnClick="() => ShowConfirmDialog(context)">
                        Xác nhận
                    </MudButton>
                }
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowDetail)
            {
                <MudTr>
                    <td colspan="9">
                        <MudCard Elevation="0">
                            <MudCardContent Class="pa-0">
                                <MudTable T="ProductDetailViewModel" Items="@context.rowItem.InputReceiptDetails" Context="DetailContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    <HeaderContent>

                                        <MudTh>DetailId</MudTh>
                                        <MudTh>ImgProduct</MudTh>
                                        <MudTh>ProductName</MudTh>
                                        <MudTh>SizeName</MudTh>
                                        <MudTh>ColorName</MudTh>
                                        <MudTh>FabricName</MudTh>
                                        <MudTh>InputPrice</MudTh>
                                        <MudTh>Quantity</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>

                                        <MudTd DataLabel="DetailId">@DetailContext.DetailId</MudTd>
                                        <MudTd DataLabel="ImgProduct">@DetailContext.Images.FirstOrDefault()</MudTd>
                                        <MudTd DataLabel="ProductName">@DetailContext.ProductName</MudTd>
                                        <MudTd DataLabel="SizeName">@DetailContext.SizeName</MudTd>
                                        <MudTd DataLabel="ColorName">@DetailContext.ColorName</MudTd>
                                        <MudTd DataLabel="FabricName">@DetailContext.FabricName</MudTd>
                                        <MudTd DataLabel="InputPrice">@DetailContext.InputPrice</MudTd>
                                        <MudTd DataLabel="Quantity">@DetailContext.Quantity</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>

                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
}
<MudDialog @ref="cancelDialogRef" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6">Bạn có chắc chắn muốn <b>huỷ</b> phiếu nhập <strong>@selectedItem?.rowItem.ReceiptId</strong>?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseCancelDialog" Color="Color.Secondary">Không</MudButton>
        <MudButton OnClick="ConfirmCancel" Color="Color.Error">Huỷ phiếu</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @ref="confirmDialogRef" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6">Xác nhận phiếu nhập <strong>@selectedItem?.rowItem.ReceiptId</strong>?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseConfirmDialog" Color="Color.Secondary">Không</MudButton>
        <MudButton OnClick="ConfirmReceipt" Color="Color.Primary">Xác nhận</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    private bool isLoading = true;
    IEnumerable<InputReceiptViewModel> listReceipts = [];
    List<RowItem> rowItems = [];
    private RowItem? selectedItem;

    private MudDialog? cancelDialogRef;
    private MudDialog? confirmDialogRef;


    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
    }
    private void ShowCancelDialog(RowItem item)
    {
        selectedItem = item;
        cancelDialogRef.ShowAsync();
    }

    private void ShowConfirmDialog(RowItem item)
    {
        selectedItem = item;
        confirmDialogRef.ShowAsync();
    }

    private void CloseCancelDialog() => cancelDialogRef.CloseAsync();
    private void CloseConfirmDialog() => confirmDialogRef.CloseAsync();

    private async Task ConfirmCancel()
    {
        if (selectedItem is null) return;

        var success = await ReceiptService.CancelReceiptAsync(selectedItem.rowItem.ReceiptId);
        if (success) await ReloadData();

        cancelDialogRef.CloseAsync();
    }

    private async Task ConfirmReceipt()
    {
        if (selectedItem is null) return;

        var success = await ReceiptService.ConfirmReceiptAsync(selectedItem.rowItem.ReceiptId);
        if (success) await ReloadData();

        confirmDialogRef.CloseAsync();
    }
    private async Task ReloadData()
    {
        isLoading = true;
        listReceipts = await ReceiptService.GetAllInputReceiptsAsync() ?? new();
        rowItems = listReceipts.Select(r => new RowItem { rowItem = r }).ToList();
        isLoading = false;
    }
    class RowItem
    {
        public bool ShowDetail = false;
        public InputReceiptViewModel rowItem {get; set;}
        public int rowNumber { get; set; }
    }
    private void ShowBtnPress(RowItem rowItem)
    {
        RowItem item = rowItem;
        item.ShowDetail = !item.ShowDetail;
    }
}